<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GSI Active Projects Manager</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 3px solid #667eea;
        }

        .header h1 {
            color: #2c3e50;
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
        }

        .header p {
            color: #7f8c8d;
            font-size: 1.1rem;
        }

        .controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
        }

        .btn.save {
            background: linear-gradient(45deg, #27ae60, #2ecc71);
        }

        .btn.add {
            background: linear-gradient(45deg, #e74c3c, #c0392b);
        }

        .projects-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(600px, 1fr));
            gap: 30px;
        }

        .project-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border: 1px solid #e3e8ee;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .project-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(45deg, #667eea, #764ba2);
        }

        .project-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
        }

        .project-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 10px;
        }

        .project-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: #2c3e50;
            background: none;
            border: none;
            outline: none;
            padding: 5px;
            border-radius: 5px;
            transition: background-color 0.3s ease;
        }

        .project-title:focus {
            background-color: #f8f9fa;
        }

        .project-dates {
            display: flex;
            gap: 15px;
            font-size: 0.9rem;
            color: #7f8c8d;
            flex-wrap: wrap;
        }

        .date-item {
            background: #ecf0f1;
            padding: 5px 12px;
            border-radius: 15px;
            border: none;
            outline: none;
            transition: all 0.3s ease;
        }

        .date-item:focus {
            background: #d5dbdb;
            box-shadow: 0 0 0 2px #667eea;
        }

        .project-background {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            min-height: 60px;
            outline: none;
            transition: all 0.3s ease;
            resize: vertical;
        }

        .project-background:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.2);
        }

        .tasks-section h3 {
            color: #34495e;
            margin-bottom: 15px;
            font-size: 1.2rem;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .task-item {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 15px;
            transition: all 0.3s ease;
        }

        .task-item:hover {
            background: #e9ecef;
            border-color: #667eea;
        }

        .task-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            flex-wrap: wrap;
            gap: 10px;
        }

        .task-name {
            font-weight: 600;
            color: #2c3e50;
            background: none;
            border: none;
            outline: none;
            padding: 5px;
            border-radius: 5px;
            min-width: 200px;
            transition: background-color 0.3s ease;
        }

        .task-name:focus {
            background-color: white;
        }

        .task-status {
            background: #27ae60;
            color: white;
            padding: 4px 12px;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: 600;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .task-status.pending {
            background: #f39c12;
        }

        .task-status.completed {
            background: #27ae60;
        }

        .task-status.in-progress {
            background: #3498db;
        }

        .task-details {
            display: grid;
            grid-template-columns: 1fr auto auto;
            gap: 15px;
            align-items: center;
        }

        .task-link {
            background: none;
            border: 1px solid #bdc3c7;
            border-radius: 5px;
            padding: 8px 12px;
            outline: none;
            transition: all 0.3s ease;
            min-width: 200px;
        }

        .task-link:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.2);
        }

        .task-link-display {
            display: flex;
            align-items: center;
            gap: 10px;
            min-width: 200px;
        }

        .task-link-url {
            color: #3498db;
            text-decoration: underline;
            cursor: pointer;
            transition: all 0.3s ease;
            word-break: break-all;
            max-width: 300px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .task-link-url:hover {
            color: #2980b9;
            text-decoration: none;
            background-color: rgba(52, 152, 219, 0.1);
            padding: 2px 6px;
            border-radius: 4px;
        }

        .edit-link-btn {
            background: #f39c12;
            color: white;
            border: none;
            padding: 4px 8px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.7rem;
            transition: all 0.3s ease;
        }

        .edit-link-btn:hover {
            background: #e67e22;
        }

        .no-link-text {
            color: #7f8c8d;
            font-style: italic;
            font-size: 0.9rem;
        }

        .task-due-date {
            background: #e8f4f8;
            border: 1px solid #bcd4e6;
            border-radius: 5px;
            padding: 8px 12px;
            outline: none;
            transition: all 0.3s ease;
            color: #2c3e50;
        }

        .task-due-date:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.2);
        }

        .add-task-btn {
            background: linear-gradient(45deg, #e74c3c, #c0392b);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 20px;
            cursor: pointer;
            font-size: 0.9rem;
            font-weight: 600;
            transition: all 0.3s ease;
            margin-top: 15px;
        }

        .add-task-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 15px rgba(231, 76, 60, 0.3);
        }

        .delete-task {
            background: #e74c3c;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.8rem;
            transition: all 0.3s ease;
        }

        .delete-task:hover {
            background: #c0392b;
        }

        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px;
        }

        .status-completed {
            background: #27ae60;
        }

        .status-in-progress {
            background: #3498db;
        }

        .status-pending {
            background: #f39c12;
        }

        @media (max-width: 768px) {
            .container {
                padding: 20px;
                margin: 10px;
            }

            .header h1 {
                font-size: 2rem;
            }

            .projects-grid {
                grid-template-columns: 1fr;
            }

            .project-header {
                flex-direction: column;
                align-items: flex-start;
            }

            .controls {
                flex-direction: column;
                align-items: stretch;
            }

            .task-details {
                grid-template-columns: 1fr;
                gap: 10px;
            }

            .task-header {
                flex-direction: column;
                align-items: flex-start;
            }
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #27ae60;
            color: white;
            padding: 15px 20px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            z-index: 1000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }

        .notification.show {
            transform: translateX(0);
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>GSI Active Projects</h1>
            <p>Geological Survey of India - Project Management Dashboard</p>
        </div>

        <div class="controls">
            <div>
                <button class="btn save" onclick="saveData()">💾 Save Local</button>
                <button class="btn add" onclick="addProject()">➕ Add Project</button>
            </div>
            <div>
                <span style="color: #7f8c8d; font-size: 0.9rem;">Last saved: <span id="lastSaved">Never</span></span>
                <br>
                <span style="color: #3498db; font-size: 0.8rem;">🔗 Connected to Google Sheets</span>
            </div>
        </div>

        <div class="projects-grid" id="projectsGrid">
            <!-- Projects will be loaded here -->
        </div>
    </div>

    <div class="notification" id="notification"></div>

    <script>
        // Project data - using in-memory storage for demo
        let projectsData = {
            projects: [
                {
                    id: 1,
                    title: "NGDR",
                    startDate: "2025-04-01",
                    endDate: "2026-03-31",
                    background: "National Geoscience Data Repository project focused on comprehensive geological data management and accessibility.",
                    tasks: [
                        {
                            id: 1,
                            name: "Scrutiny Comments",
                            link: "https://docs.google.com/spreadsheets/u/0/d/1Sigy3Ti31FJZmGn7S1scqc_Ws0k8hHdq/edit",
                            dueDate: "2026-03-31",
                            status: "in-progress"
                        }
                    ]
                },
                {
                    id: 2,
                    title: "Commodity wise projects",
                    startDate: "2025-04-01",
                    endDate: "2025-07-31",
                    background: "Systematic analysis and evaluation of various geological commodities across different regions.",
                    tasks: [
                        {
                            id: 1,
                            name: "Status of Commodity wise project",
                            link: "https://docs.google.com/spreadsheets/u/0/d/1ewtLeNbuJO2hws-rtsUlsEASt2PAdSDl/edit",
                            dueDate: "2026-03-31",
                            status: "in-progress"
                        },
                        {
                            id: 2,
                            name: "Steps for scrutiny of commodity wise projects",
                            link: "https://docs.google.com/document/d/1f99eG_oK7jZXH2uRElztjP6jsnmy3M7s7lJudGkzClY/edit?usp=drivesdk",
                            dueDate: "2025-08-15",
                            status: "pending"
                        }
                    ]
                },
                {
                    id: 3,
                    title: "Procurement",
                    startDate: "2025-04-01",
                    endDate: "2026-03-31",
                    background: "Management of procurement processes including small and large amount purchases, documentation and compliance.",
                    tasks: [
                        {
                            id: 1,
                            name: "List of small amount Procurement",
                            link: "https://docs.google.com/document/d/191jhjnSmUHVVbOIOEBUOGJlLkWbp0sXcLdhwilm-lfA/edit?usp=sharing",
                            dueDate: "2025-12-31",
                            status: "in-progress"
                        },
                        {
                            id: 2,
                            name: "List of large amount procurement",
                            link: "https://docs.google.com/document/d/1R7fwMLt7VaZgJi2NtEXAZZekyeUUMS5GACQzjv7oDgo/edit?tab=t.0",
                            dueDate: "2025-12-31",
                            status: "in-progress"
                        },
                        {
                            id: 3,
                            name: "Procurement Rules and Procedures",
                            link: "https://docs.google.com/document/d/1bO2Zv2IKl_MCOtb1DQ-r5nw-owqaxDu_-6Q8bt48c7M/edit?tab=t.0",
                            dueDate: "2025-09-30",
                            status: "completed"
                        }
                    ]
                },
                {
                    id: 4,
                    title: "Miscellaneous",
                    startDate: "2025-04-01",
                    endDate: "2026-03-31",
                    background: "Various administrative and operational tasks that support the overall functioning of GSI projects.",
                    tasks: [
                        {
                            id: 1,
                            name: "Administrative Support",
                            link: "",
                            dueDate: "2026-03-31",
                            status: "pending"
                        }
                    ]
                }
            ]
        };

        function renderProjects() {
            const grid = document.getElementById('projectsGrid');
            grid.innerHTML = '';

            projectsData.projects.forEach(project => {
                const projectCard = createProjectCard(project);
                grid.appendChild(projectCard);
            });
        }

        function createProjectCard(project) {
            const card = document.createElement('div');
            card.className = 'project-card';
            card.innerHTML = `
                <div class="project-header">
                    <input type="text" class="project-title" value="${project.title}" 
                           onchange="updateProject(${project.id}, 'title', this.value)">
                    <div class="project-dates">
                        <input type="date" class="date-item" value="${project.startDate}" 
                               onchange="updateProject(${project.id}, 'startDate', this.value)">
                        <input type="date" class="date-item" value="${project.endDate}" 
                               onchange="updateProject(${project.id}, 'endDate', this.value)">
                    </div>
                </div>
                
                <textarea class="project-background" placeholder="Project background..." 
                          onchange="updateProject(${project.id}, 'background', this.value)">${project.background}</textarea>
                
                <div class="tasks-section">
                    <h3><span class="status-indicator status-in-progress"></span>Tasks</h3>
                    <div id="tasks-${project.id}">
                        ${project.tasks.map(task => createTaskHTML(project.id, task)).join('')}
                    </div>
                    <button class="add-task-btn" onclick="addTask(${project.id})">+ Add Task</button>
                </div>
            `;
            return card;
        }

        function createTaskHTML(projectId, task) {
            return `
                <div class="task-item" data-task-id="${task.id}">
                    <div class="task-header">
                        <input type="text" class="task-name" value="${task.name}" 
                               onchange="updateTask(${projectId}, ${task.id}, 'name', this.value)">
                        <div style="display: flex; gap: 10px; align-items: center;">
                            <select class="task-status ${task.status}" 
                                    onchange="updateTask(${projectId}, ${task.id}, 'status', this.value); this.className = 'task-status ' + this.value;">
                                <option value="pending" ${task.status === 'pending' ? 'selected' : ''}>Pending</option>
                                <option value="in-progress" ${task.status === 'in-progress' ? 'selected' : ''}>In Progress</option>
                                <option value="completed" ${task.status === 'completed' ? 'selected' : ''}>Completed</option>
                            </select>
                            <button class="delete-task" onclick="deleteTask(${projectId}, ${task.id})">🗑️</button>
                        </div>
                    </div>
                    <div class="task-details">
                        <div id="link-container-${projectId}-${task.id}">
                            ${createLinkDisplay(projectId, task.id, task.link)}
                        </div>
                        <input type="date" class="task-due-date" value="${task.dueDate}" 
                               onchange="updateTask(${projectId}, ${task.id}, 'dueDate', this.value)">
                    </div>
                </div>
            `;
        }

        function createLinkDisplay(projectId, taskId, link) {
            if (link && link.trim() !== '') {
                // Extract display text from URL (remove protocol and truncate)
                let displayText = link.replace(/^https?:\/\//, '').replace(/^www\./, '');
                if (displayText.length > 40) {
                    displayText = displayText.substring(0, 37) + '...';
                }
                
                return `
                    <div class="task-link-display">
                        <a href="${link}" target="_blank" class="task-link-url" title="${link}">
                            🔗 ${displayText}
                        </a>
                        <button class="edit-link-btn" onclick="editTaskLink(${projectId}, ${taskId}, '${link.replace(/'/g, "\\'")}')">
                            ✏️ Edit
                        </button>
                    </div>
                `;
            } else {
                return `
                    <div class="task-link-display">
                        <span class="no-link-text">No link added</span>
                        <button class="edit-link-btn" onclick="editTaskLink(${projectId}, ${taskId}, '')">
                            ➕ Add Link
                        </button>
                    </div>
                `;
            }
        }

        function editTaskLink(projectId, taskId, currentLink) {
            const container = document.getElementById(`link-container-${projectId}-${taskId}`);
            container.innerHTML = `
                <div style="display: flex; gap: 10px; align-items: center;">
                    <input type="url" class="task-link" placeholder="Enter URL..." value="${currentLink}" 
                           id="edit-link-${projectId}-${taskId}" onkeypress="handleLinkKeyPress(event, ${projectId}, ${taskId})">
                    <button class="edit-link-btn" onclick="saveLinkEdit(${projectId}, ${taskId})">💾 Save</button>
                    <button class="edit-link-btn" style="background: #e74c3c;" onclick="cancelLinkEdit(${projectId}, ${taskId}, '${currentLink.replace(/'/g, "\\'")}')">❌ Cancel</button>
                </div>
            `;
            
            // Focus on the input field
            document.getElementById(`edit-link-${projectId}-${taskId}`).focus();
        }

        function handleLinkKeyPress(event, projectId, taskId) {
            if (event.key === 'Enter') {
                saveLinkEdit(projectId, taskId);
            }
        }

        function saveLinkEdit(projectId, taskId) {
            const input = document.getElementById(`edit-link-${projectId}-${taskId}`);
            const newLink = input.value.trim();
            
            updateTask(projectId, taskId, 'link', newLink);
            
            const container = document.getElementById(`link-container-${projectId}-${taskId}`);
            container.innerHTML = createLinkDisplay(projectId, taskId, newLink);
        }

        function cancelLinkEdit(projectId, taskId, originalLink) {
            const container = document.getElementById(`link-container-${projectId}-${taskId}`);
            container.innerHTML = createLinkDisplay(projectId, taskId, originalLink);
        }

        function updateProject(projectId, field, value) {
            const project = projectsData.projects.find(p => p.id === projectId);
            if (project) {
                project[field] = value;
                showNotification('Project updated successfully!');
            }
        }

        function updateTask(projectId, taskId, field, value) {
            const project = projectsData.projects.find(p => p.id === projectId);
            if (project) {
                const task = project.tasks.find(t => t.id === taskId);
                if (task) {
                    task[field] = value;
                    showNotification('Task updated successfully!');
                }
            }
        }

        function addTask(projectId) {
            const project = projectsData.projects.find(p => p.id === projectId);
            if (project) {
                const newTask = {
                    id: Date.now(),
                    name: "New Task",
                    link: "",
                    dueDate: new Date().toISOString().split('T')[0],
                    status: "pending"
                };
                project.tasks.push(newTask);
                
                const tasksContainer = document.getElementById(`tasks-${projectId}`);
                tasksContainer.innerHTML += createTaskHTML(projectId, newTask);
                showNotification('Task added successfully!');
            }
        }

        function deleteTask(projectId, taskId) {
            const project = projectsData.projects.find(p => p.id === projectId);
            if (project) {
                project.tasks = project.tasks.filter(t => t.id !== taskId);
                document.querySelector(`[data-task-id="${taskId}"]`).remove();
                showNotification('Task deleted successfully!');
            }
        }

        function addProject() {
            const newProject = {
                id: Date.now(),
                title: "New Project",
                startDate: new Date().toISOString().split('T')[0],
                endDate: new Date(Date.now() + 365*24*60*60*1000).toISOString().split('T')[0],
                background: "Project description...",
                tasks: []
            };
            
            projectsData.projects.push(newProject);
            const grid = document.getElementById('projectsGrid');
            grid.appendChild(createProjectCard(newProject));
            showNotification('Project added successfully!');
        }

        function saveData() {
            try {
                // Save to browser's localStorage
                localStorage.setItem('gsiProjects', JSON.stringify(projectsData));
                const now = new Date().toLocaleString();
                document.getElementById('lastSaved').textContent = now;
                showNotification('💾 Changes saved locally!');
                console.log('Project data saved to localStorage:', projectsData);
            } catch (error) {
                console.error('Error saving data:', error);
                showNotification('❌ Error saving data locally. Please try again.');
            }
        }

        function loadData() {
            try {
                // First try to load from browser's localStorage
                const saved = localStorage.getItem('gsiProjects');
                if (saved) {
                    projectsData = JSON.parse(saved);
                    console.log('Project data loaded from localStorage');
                } else {
                    console.log('No saved data found locally, using default data');
                }
                
                // Also try to sync from Google Sheets on startup
                setTimeout(() => {
                    syncWithGoogleSheets();
                }, 1000);
                
            } catch (error) {
                console.error('Error loading data:', error);
                showNotification('⚠️ Error loading saved data. Using default data.');
            }
        }

        function showNotification(message) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.classList.add('show');
            
            setTimeout(() => {
                notification.classList.remove('show');
            }, 3000);
        }

        // Google Sheets Integration - VERIFIED WORKING URL (Version 7)
        const WEBAPP_URL = 'https://script.google.com/macros/s/AKfycbwrer1F65kcCgVSBy93Q9dJkSDk-veDsj4liWg4d6pxvG2ErLdNmxD03uqTNihB9iY2/exec';
        const SHEET_ID = '1wTijrTScyVoNO_TrlFBm8m5TPBGcAu6a6Dj6kpC7loo';

        // CORS-friendly fetch with error handling
        function syncWithGoogleSheets() {
            showNotification('Syncing with Google Sheets...');
            
            // Simple GET request (CORS-friendly per documentation)
            fetch(`${WEBAPP_URL}?action=load&sheetId=${SHEET_ID}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        projectsData = data.data;
                        renderProjects();
                        showNotification('✅ Data synced from Google Sheets successfully!');
                        document.getElementById('lastSaved').textContent = new Date().toLocaleString();
                    } else {
                        showNotification('❌ Sync failed: ' + data.error);
                    }
                })
                .catch(error => {
                    console.error('Sync error:', error);
                    showNotification('❌ Sync error: ' + error.message + ' (Make sure you\'re on Google Sites, not local file)');
                });
        }

        function saveToGoogleSheets() {
            showNotification('Saving to Google Sheets...');
            
            // Debug: Log what we're sending
            console.log('Saving project data:', projectsData);
            
            const payload = {
                action: 'save',
                sheetId: SHEET_ID,
                data: projectsData
            };
            
            console.log('Sending payload:', payload);

            // Simple POST request (CORS-friendly per documentation)
            fetch(WEBAPP_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Response from Google Apps Script:', data);
                if (data.success) {
                    showNotification('✅ Data saved to Google Sheets successfully! Rows: ' + (data.rows || 'unknown'));
                    document.getElementById('lastSaved').textContent = new Date().toLocaleString();
                } else {
                    showNotification('❌ Save failed: ' + data.error);
                }
            })
            .catch(error => {
                console.error('Save error:', error);
                showNotification('❌ Save error: ' + error.message + ' (Make sure you\'re on Google Sites, not local file)');
            });
        }
    </script>
</body>
</html>
